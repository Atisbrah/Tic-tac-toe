import java.util.Scanner;

public class Main {
    
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        char[][] game = new char[5][5];
        makeTable(game);
        table(game);

        boolean exit = false;
        while(exit == false) {
            if (check(game) == 'D') {
                System.out.println("Draw.");
                exit = true;
            } else if (check(game) == 'X') {
                System.out.println("X wins!");
                exit = true;
            } else if (check(game) == 'O') {
                System.out.println("O wins!");
                exit = true;
            } else {
                move(game);
                table(game);
            }
        }
    }
    
    //player makes a move. ask for input, check if it is number, then the number range from 1 to 3, and the cell the
    //player wants to occupy. If everything is correct, the counter helps us keep track of which symbol comes next.
    //starting from 0, 'X' goes even, and 'O' goes odd.
    public static void move (char[][] game) {
        boolean accept = false;
        int a, b;
        int counter = 0;
        while (!accept) {
            System.out.println("Enter the coordinates: ");
            String input = scanner.nextLine();
            try {
                String [] pieces = input.split(" ");
                a = Integer.parseInt(pieces[0]);
                b = Integer.parseInt(pieces[1]);
            }catch (NumberFormatException e) {
                System.out.println("You should enter numbers!");
                break;
            }
            if (a > 3 || a < 1 || b > 3 || b < 1) {
                System.out.println("Coordinates should be from 1 to 3!");
            } else if (game[a][b] == 'X' || game[a][b] == 'O') {
                System.out.println("This cell is occupied! Choose another one!");
            } else {
                if (counter % 2 == 0) {
                    game[a][b] = 'X';
                    table(game);
                } else {
                    game[a][b] = 'O';
                    table(game);
                }
                counter++;
                accept = true;
            }
        }
    }
    
    //first count every 'X' and 'O' on the table, and decide the current outcome of the game
    //draw, x win, o win or none of the above
    public static char check (char[][] game) {
        int xCount = 0;
        int oCount = 0;
        for (int i = 1; i < 4; i++){
            for (int j = 0; j < 5; j++) {
                if (game[i][j] == 'X') {
                    xCount++;
                } else if (game[i][j] == 'O') {
                    oCount++;
                }
            }
        }
        // X - X wins / O - O wins / D - Draw
        if (xCount + oCount == 9) {
            return 'D';
        } else if (xWinCheck(game) == 'X') {
            return 'X';
        } else if (oWinCheck(game) == 'O') {
            return 'O';
        } else {
            return 'N';
        }
    }
    
    //build an empty table
    public static void makeTable(char[][] game) {
        for (int i = 1; i < 4; i++){
            for (int j = 0; j < 5; j++) {
                if (j == 0 || j == 4) {
                game[i][j] = '|';
                } else {
                game[i][j] = ' ';
                }
            }
        }
    }
    
    //printing out the actual state of game 
    public static void table(char[][] game) {
        System.out.println("---------");
        for (int i = 1; i < 4; i++){
            for (int j = 0; j < 5; j++) {
                System.out.print(game[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println("---------");
    }
    
    // checking all possibilities for X to win
    public static char xWinCheck(char[][] game) {
        if(game[1][1] == 'X' && game[1][2] == 'X' && game[1][3] == 'X' || 
           game[2][1] == 'X' && game[2][2] == 'X' && game[2][3] == 'X' ||
           game[3][1] == 'X' && game[3][2] == 'X' && game[3][3] == 'X' ||
           game[1][1] == 'X' && game[2][1] == 'X' && game[3][1] == 'X' ||
           game[1][2] == 'X' && game[2][2] == 'X' && game[3][2] == 'X' ||
           game[1][3] == 'X' && game[2][3] == 'X' && game[3][3] == 'X' ||
           game[1][1] == 'X' && game[2][2] == 'X' && game[3][3] == 'X' ||
           game[1][3] == 'X' && game[2][2] == 'X' && game[3][1] == 'X') {
            return 'X';
        } else {
            return 'N';
        }
    }
    // checking all possibilities for O to win
    public static char oWinCheck(char[][] game) {
        if (game[1][1] == 'O' && game[1][2] == 'O' && game[1][3] == 'O' || 
            game[2][1] == 'O' && game[2][2] == 'O' && game[2][3] == 'O' ||
            game[3][1] == 'O' && game[3][2] == 'O' && game[3][3] == 'O' ||
            game[1][1] == 'O' && game[2][1] == 'O' && game[3][1] == 'O' ||
            game[1][2] == 'O' && game[2][2] == 'O' && game[3][2] == 'O' ||
            game[1][3] == 'O' && game[2][3] == 'O' && game[3][3] == 'O' ||
            game[1][1] == 'O' && game[2][2] == 'O' && game[3][3] == 'O' ||
            game[1][3] == 'O' && game[2][2] == 'O' && game[3][1] == 'O'){
            return 'O';
        } else {
            return 'N';
        }
    }
}
